apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

version = "0.1.0"

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.0"

    defaultConfig {
        applicationId "cn.artaris.framework"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url "https://jitpack.io"
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:appcompat-v7:24.1.1'
    compile 'com.android.support:recyclerview-v7:24.1.1'
    compile 'com.android.support:support-v4:24.1.1'

    compile 'com.google.guava:guava:18.0'//EventBus
    compile 'com.google.code.gson:gson:2.7'//Gson

    compile 'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT'//ORM
    compile 'com.github.bumptech.glide:glide:3.7.0'//图片加载库
    compile 'com.github.zzz40500:android-shapeLoadingView:1.0.3.2'//Loading


    compile 'com.jakewharton:butterknife:8.2.0'
    apt 'com.jakewharton:butterknife-compiler:8.2.0'

}

def siteUrl = 'https://github.com/ArtarisCN/AndroidFramework'                        // #CONFIG# // project homepage
def gitUrl = 'https://github.com/ArtarisCN/AndroidFramework.git'                     // #CONFIG# // project git
group = "cn.artaris"                                                                 // #CONFIG# // Maven Group ID for the artifact (pageckage name is ok)

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                name 'Artaris\'s Framework For Android'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'artaris'
                        name 'ArtarisCN'
                        email 'artaris@sina.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    // archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
boolean isHasFile = false
if (project.rootProject.file('local.properties') != null){
    isHasFile = true
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}
bintray {
    user = isHasFile ? properties.getProperty("bintray.user") : System.getenv("bintray.user")
    key = isHasFile ? properties.getProperty("bintray.apikey") : System.getenv("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "artaris-framework"                                                 // #CONFIG# project name in jcenter
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}
//android.libraryVariants.all { variant ->
//    println variant.javaCompile.classpath.files
//    if(variant.name == 'release') { //我们只需 release 的 javadoc
//        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
//            // title = ''
//            // description = ''
//            source = variant.javaCompile.source
//            classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
//            options {
//                encoding "utf-8"
//                links "http://docs.oracle.com/javase/7/docs/api/"
//                linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
//            }
//            exclude '**/BuildConfig.java'
//            exclude '**/R.java'
//        }
//        task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
//            classifier = 'javadoc'
//            from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
//        }
//        artifacts {
//            archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
//        }
//    }
//}
